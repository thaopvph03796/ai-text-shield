import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { Upload, FileText, Copy } from "lucide-react";
import { toast } from "sonner";
import { ScoreDisplay } from "./ScoreDisplay";
import { DetectorResults } from "./DetectorResults";

const EXAMPLE_TEXT = `Tr√≠ tu·ªá nh√¢n t·∫°o (AI) ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta l√†m vi·ªác v√† s·ªëng. C√¥ng ngh·ªá n√†y c√≥ kh·∫£ nƒÉng x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn, nh·∫≠n d·∫°ng m·∫´u v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh th√¥ng minh. AI ƒë∆∞·ª£c ·ª©ng d·ª•ng r·ªông r√£i trong nhi·ªÅu lƒ©nh v·ª±c nh∆∞ y t·∫ø, gi√°o d·ª•c, kinh doanh v√† gi·∫£i tr√≠. Tuy nhi√™n, vi·ªác s·ª≠ d·ª•ng AI c≈©ng ƒë·∫∑t ra nhi·ªÅu c√¢u h·ªèi v·ªÅ ƒë·∫°o ƒë·ª©c v√† t√°c ƒë·ªông x√£ h·ªôi.`;

export const PlagiarismChecker = () => {
  const [text, setText] = useState("");
  const [isChecking, setIsChecking] = useState(false);
  const [aiScore, setAiScore] = useState<number | null>(null);
  const [detectorScores, setDetectorScores] = useState<Array<{name: string, score: number, icon: string}>>([]);

  const wordCount = text.trim().split(/\s+/).filter(word => word.length > 0).length;

  const handleCheck = async () => {
    if (!text.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn ki·ªÉm tra");
      return;
    }

    setIsChecking(true);
    
    // Simulate AI checking with realistic delays
    setTimeout(() => {
      const baseScore = Math.floor(Math.random() * 40) + 30; // 30-70%
      setAiScore(0);
      
      // Animate score counting up
      let currentScore = 0;
      const increment = baseScore / 30;
      const scoreInterval = setInterval(() => {
        currentScore += increment;
        if (currentScore >= baseScore) {
          setAiScore(baseScore);
          clearInterval(scoreInterval);
        } else {
          setAiScore(Math.floor(currentScore));
        }
      }, 50);

      // Generate detector results
      const detectors = [
        { name: "zerogpt.com", icon: "üîç" },
        { name: "undetectable.ai", icon: "üéØ" },
        { name: "grammarly.com", icon: "‚úçÔ∏è" },
        { name: "crossplag.com", icon: "üìù" },
        { name: "sapling.ai", icon: "üåø" },
        { name: "seo.ai", icon: "üîé" },
        { name: "detecting-ai.com", icon: "ü§ñ" },
        { name: "contentdetector.ai", icon: "üìä" }
      ];

      const results = detectors.map(detector => ({
        name: detector.name,
        score: Math.floor(Math.random() * 30) + baseScore - 10,
        icon: detector.icon
      }));

      setDetectorScores(results);
      setIsChecking(false);
      toast.success("Ki·ªÉm tra ho√†n t·∫•t!");
    }, 2000);
  };

  const handleTryExample = () => {
    setText(EXAMPLE_TEXT);
    setAiScore(null);
    setDetectorScores([]);
    toast.info("ƒê√£ t·∫£i vƒÉn b·∫£n m·∫´u");
  };

  const handleUpload = () => {
    toast.info("T√≠nh nƒÉng upload ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
  };

  const handlePaste = async () => {
    try {
      const clipboardText = await navigator.clipboard.readText();
      setText(clipboardText);
      toast.success("ƒê√£ d√°n vƒÉn b·∫£n t·ª´ clipboard");
    } catch (err) {
      toast.error("Kh√¥ng th·ªÉ truy c·∫≠p clipboard");
    }
  };

  return (
    <div className="container mx-auto px-4 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-foreground mb-4">
            C√¥ng c·ª• ki·ªÉm tra ƒë·∫°o vƒÉn AI
          </h1>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            T√≠nh nƒÉng Ki·ªÉm tra ƒê·∫°o vƒÉn AI cho ph√©p ng∆∞·ªùi d√πng x√°c minh v√† ph√°t hi·ªán n·ªôi dung ƒë∆∞·ª£c t·∫°o b·ªüi 
            tr√≠ tu·ªá nh√¢n t·∫°o (AI) ho·∫∑c sao ch√©p t·ª´ c√°c ngu·ªìn kh√°c tr√™n internet
          </p>
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          <Card className="lg:col-span-2 p-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">
                  s·ªë t·ª´: {wordCount} / 5000
                </span>
                <span className="text-sm text-muted-foreground">
                  C√≤n l·∫°i 5000 t·ª´
                </span>
              </div>

              <Textarea
                placeholder="Nh·∫≠p vƒÉn b·∫£n ho·∫∑c t·∫£i l√™n t√†i li·ªáu c·ªßa b·∫°n ƒë·ªÉ ki·ªÉm tra..."
                value={text}
                onChange={(e) => setText(e.target.value)}
                className="min-h-[300px] resize-none text-base"
              />

              <div className="flex flex-wrap gap-3">
                <Button variant="outline" onClick={handleUpload}>
                  <Upload className="w-4 h-4 mr-2" />
                  Upload Doc
                </Button>
                <Button variant="outline" onClick={handleTryExample}>
                  <FileText className="w-4 h-4 mr-2" />
                  Th·ª≠ v√≠ d·ª•
                </Button>
                <Button variant="outline" onClick={handlePaste}>
                  <Copy className="w-4 h-4 mr-2" />
                  D√°n vƒÉn b·∫£n
                </Button>
              </div>

              <Button 
                onClick={handleCheck}
                disabled={isChecking || !text.trim()}
                className="w-full"
                size="lg"
              >
                {isChecking ? "ƒêang ki·ªÉm tra..." : "Check AI"}
              </Button>
            </div>
          </Card>

          <div className="space-y-6">
            <ScoreDisplay score={aiScore} isChecking={isChecking} />
            <DetectorResults scores={detectorScores} />
          </div>
        </div>

        <div className="mt-8 text-center">
          <p className="text-sm text-muted-foreground">
            N·∫øu b·∫°n c·∫ßn tr·ª£ gi√∫p, tham gia nh√≥m Telegram c·ªßa ch√∫ng t√¥i.{" "}
            <a href="#" className="text-primary hover:underline">
              Telegram Group
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};
