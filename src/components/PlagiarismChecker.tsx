import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { Upload, FileText, Copy, Globe } from "lucide-react";
import { toast } from "sonner";
import { ScoreDisplay } from "./ScoreDisplay";
import { DetectorResults } from "./DetectorResults";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";

const EXAMPLE_TEXTS = {
  vi: `Tr√≠ tu·ªá nh√¢n t·∫°o (AI) ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta l√†m vi·ªác v√† s·ªëng. C√¥ng ngh·ªá n√†y c√≥ kh·∫£ nƒÉng x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn, nh·∫≠n d·∫°ng m·∫´u v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh th√¥ng minh. AI ƒë∆∞·ª£c ·ª©ng d·ª•ng r·ªông r√£i trong nhi·ªÅu lƒ©nh v·ª±c nh∆∞ y t·∫ø, gi√°o d·ª•c, kinh doanh v√† gi·∫£i tr√≠. Tuy nhi√™n, vi·ªác s·ª≠ d·ª•ng AI c≈©ng ƒë·∫∑t ra nhi·ªÅu c√¢u h·ªèi v·ªÅ ƒë·∫°o ƒë·ª©c v√† t√°c ƒë·ªông x√£ h·ªôi.`,
  en: `Artificial Intelligence (AI) is transforming the way we work and live. This technology has the ability to process large amounts of data, recognize patterns, and make intelligent decisions. AI is widely applied in various fields such as healthcare, education, business, and entertainment. However, the use of AI also raises many questions about ethics and social impact.`,
  zh: `‰∫∫Â∑•Êô∫ËÉΩÔºàAIÔºâÊ≠£Âú®ÊîπÂèòÊàë‰ª¨ÁöÑÂ∑•‰ΩúÂíåÁîüÊ¥ªÊñπÂºè„ÄÇËøôÈ°πÊäÄÊúØËÉΩÂ§üÂ§ÑÁêÜÂ§ßÈáèÊï∞ÊçÆÔºåËØÜÂà´Ê®°ÂºèÔºåÂπ∂ÂÅöÂá∫Êô∫ËÉΩÂÜ≥Á≠ñ„ÄÇ‰∫∫Â∑•Êô∫ËÉΩÂπøÊ≥õÂ∫îÁî®‰∫éÂåªÁñó„ÄÅÊïôËÇ≤„ÄÅÂïÜ‰∏öÂíåÂ®±‰πêÁ≠âÂ§ö‰∏™È¢ÜÂüü„ÄÇÁÑ∂ËÄåÔºå‰∫∫Â∑•Êô∫ËÉΩÁöÑ‰ΩøÁî®‰πüÂºïÂèë‰∫ÜËÆ∏Â§öÂÖ≥‰∫éÈÅìÂæ∑ÂíåÁ§æ‰ºöÂΩ±ÂìçÁöÑÈóÆÈ¢ò„ÄÇ`,
  ja: `‰∫∫Â∑•Áü•ËÉΩÔºàAIÔºâ„ÅØ„ÄÅÁßÅ„Åü„Å°„ÅÆÂÉç„ÅçÊñπ„ÇÑÁîüÊ¥ª„ÇíÂ§â„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åì„ÅÆÊäÄË°ì„ÅØ„ÄÅÂ§ßÈáè„ÅÆ„Éá„Éº„Çø„ÇíÂá¶ÁêÜ„Åó„ÄÅ„Éë„Çø„Éº„É≥„ÇíË™çË≠ò„Åó„ÄÅÁü•ÁöÑ„Å™Ê±∫ÂÆö„Çí‰∏ã„ÅôËÉΩÂäõ„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇAI„ÅØ„ÄÅÂåªÁôÇ„ÄÅÊïôËÇ≤„ÄÅ„Éì„Ç∏„Éç„Çπ„ÄÅ„Ç®„É≥„Çø„Éº„ÉÜ„Ç§„É≥„É°„É≥„Éà„Å™„Å©„ÄÅ„Åï„Åæ„Åñ„Åæ„Å™ÂàÜÈáé„ÅßÂ∫É„ÅèÂøúÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åó„Åã„Åó„ÄÅAI„ÅÆ‰ΩøÁî®„ÅØÂÄ´ÁêÜ„Å®Á§æ‰ºöÁöÑÂΩ±Èüø„Å´Èñ¢„Åô„ÇãÂ§ö„Åè„ÅÆË≥™Âïè„ÇÇÊèêËµ∑„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ`,
  es: `La Inteligencia Artificial (IA) est√° transformando la forma en que trabajamos y vivimos. Esta tecnolog√≠a tiene la capacidad de procesar grandes cantidades de datos, reconocer patrones y tomar decisiones inteligentes. La IA se aplica ampliamente en diversos campos como la salud, la educaci√≥n, los negocios y el entretenimiento. Sin embargo, el uso de la IA tambi√©n plantea muchas preguntas sobre la √©tica y el impacto social.`,
  fr: `L'Intelligence Artificielle (IA) transforme notre fa√ßon de travailler et de vivre. Cette technologie a la capacit√© de traiter de grandes quantit√©s de donn√©es, de reconna√Ætre des mod√®les et de prendre des d√©cisions intelligentes. L'IA est largement appliqu√©e dans divers domaines tels que la sant√©, l'√©ducation, les affaires et le divertissement. Cependant, l'utilisation de l'IA soul√®ve √©galement de nombreuses questions sur l'√©thique et l'impact social.`,
};

const LANGUAGES = [
  { code: "vi", name: "Ti·∫øng Vi·ªát", flag: "üáªüá≥" },
  { code: "en", name: "English", flag: "üá∫üá∏" },
  { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
  { code: "ja", name: "Êó•Êú¨Ë™û", flag: "üáØüáµ" },
  { code: "es", name: "Espa√±ol", flag: "üá™üá∏" },
  { code: "fr", name: "Fran√ßais", flag: "üá´üá∑" },
];

export const PlagiarismChecker = () => {
  const [text, setText] = useState("");
  const [language, setLanguage] = useState("vi");
  const [isChecking, setIsChecking] = useState(false);
  const [aiScore, setAiScore] = useState<number | null>(null);
  const [detectorScores, setDetectorScores] = useState<Array<{name: string, score: number, icon: string}>>([]);

  const wordCount = text.trim().split(/\s+/).filter(word => word.length > 0).length;

  const handleCheck = async () => {
    if (!text.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn ki·ªÉm tra");
      return;
    }

    setIsChecking(true);
    
    // Simulate AI checking with realistic delays
    setTimeout(() => {
      const baseScore = Math.floor(Math.random() * 40) + 30; // 30-70%
      setAiScore(0);
      
      // Animate score counting up
      let currentScore = 0;
      const increment = baseScore / 30;
      const scoreInterval = setInterval(() => {
        currentScore += increment;
        if (currentScore >= baseScore) {
          setAiScore(baseScore);
          clearInterval(scoreInterval);
        } else {
          setAiScore(Math.floor(currentScore));
        }
      }, 50);

      // Generate detector results
      const detectors = [
        { name: "zerogpt.com", icon: "üîç" },
        { name: "undetectable.ai", icon: "üéØ" },
        { name: "grammarly.com", icon: "‚úçÔ∏è" },
        { name: "crossplag.com", icon: "üìù" },
        { name: "sapling.ai", icon: "üåø" },
        { name: "seo.ai", icon: "üîé" },
        { name: "detecting-ai.com", icon: "ü§ñ" },
        { name: "contentdetector.ai", icon: "üìä" }
      ];

      const results = detectors.map(detector => ({
        name: detector.name,
        score: Math.floor(Math.random() * 30) + baseScore - 10,
        icon: detector.icon
      }));

      setDetectorScores(results);
      setIsChecking(false);
      toast.success("Ki·ªÉm tra ho√†n t·∫•t!");
    }, 2000);
  };

  const handleTryExample = () => {
    const exampleText = EXAMPLE_TEXTS[language as keyof typeof EXAMPLE_TEXTS] || EXAMPLE_TEXTS.vi;
    setText(exampleText);
    setAiScore(null);
    setDetectorScores([]);
    toast.info("ƒê√£ t·∫£i vƒÉn b·∫£n m·∫´u");
  };

  const handleLanguageChange = (value: string) => {
    setLanguage(value);
    const selectedLang = LANGUAGES.find(lang => lang.code === value);
    toast.success(`ƒê√£ chuy·ªÉn sang ${selectedLang?.name}`);
  };

  const handleUpload = () => {
    toast.info("T√≠nh nƒÉng upload ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
  };

  const handlePaste = async () => {
    try {
      const clipboardText = await navigator.clipboard.readText();
      setText(clipboardText);
      toast.success("ƒê√£ d√°n vƒÉn b·∫£n t·ª´ clipboard");
    } catch (err) {
      toast.error("Kh√¥ng th·ªÉ truy c·∫≠p clipboard");
    }
  };

  return (
    <div className="container mx-auto px-4 py-12">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-foreground mb-4">
            C√¥ng c·ª• ki·ªÉm tra ƒë·∫°o vƒÉn AI
          </h1>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            T√≠nh nƒÉng Ki·ªÉm tra ƒê·∫°o vƒÉn AI cho ph√©p ng∆∞·ªùi d√πng x√°c minh v√† ph√°t hi·ªán n·ªôi dung ƒë∆∞·ª£c t·∫°o b·ªüi 
            tr√≠ tu·ªá nh√¢n t·∫°o (AI) ho·∫∑c sao ch√©p t·ª´ c√°c ngu·ªìn kh√°c tr√™n internet
          </p>
        </div>

        <Tabs defaultValue="ai-detector" className="mb-6">
          <TabsList className="grid w-full max-w-md mx-auto grid-cols-2">
            <TabsTrigger value="ai-detector">
              AI Detector
            </TabsTrigger>
            <TabsTrigger value="bypass-ai" onClick={() => window.location.href = '/ai-bypass'}>
              Bypass AI
            </TabsTrigger>
          </TabsList>
        </Tabs>

        <div className="grid lg:grid-cols-3 gap-6">
          <Card className="lg:col-span-2 p-6">
            <div className="space-y-4">
              <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                <div className="flex items-center gap-4">
                  <Select value={language} onValueChange={handleLanguageChange}>
                    <SelectTrigger className="w-[200px]">
                      <Globe className="w-4 h-4 mr-2" />
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {LANGUAGES.map((lang) => (
                        <SelectItem key={lang.code} value={lang.code}>
                          <span className="flex items-center gap-2">
                            <span>{lang.flag}</span>
                            <span>{lang.name}</span>
                          </span>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <span className="text-sm text-muted-foreground">
                    {wordCount} / 5000 t·ª´
                  </span>
                </div>
                <span className="text-sm text-muted-foreground">
                  C√≤n l·∫°i 5000 t·ª´
                </span>
              </div>

              <Textarea
                placeholder="Nh·∫≠p vƒÉn b·∫£n ho·∫∑c t·∫£i l√™n t√†i li·ªáu c·ªßa b·∫°n ƒë·ªÉ ki·ªÉm tra..."
                value={text}
                onChange={(e) => setText(e.target.value)}
                className="min-h-[300px] resize-none text-base"
              />

              <div className="flex flex-wrap gap-3">
                <Button variant="outline" onClick={handleUpload}>
                  <Upload className="w-4 h-4 mr-2" />
                  Upload Doc
                </Button>
                <Button variant="outline" onClick={handleTryExample}>
                  <FileText className="w-4 h-4 mr-2" />
                  Th·ª≠ v√≠ d·ª•
                </Button>
                <Button variant="outline" onClick={handlePaste}>
                  <Copy className="w-4 h-4 mr-2" />
                  D√°n vƒÉn b·∫£n
                </Button>
              </div>

              <Button 
                onClick={handleCheck}
                disabled={isChecking || !text.trim()}
                className="w-full"
                size="lg"
              >
                {isChecking ? "ƒêang ki·ªÉm tra..." : "Check AI"}
              </Button>
            </div>
          </Card>

          <div className="space-y-6">
            <ScoreDisplay score={aiScore} isChecking={isChecking} />
            <DetectorResults scores={detectorScores} />
          </div>
        </div>

        <div className="mt-8 text-center">
          <p className="text-sm text-muted-foreground">
            N·∫øu b·∫°n c·∫ßn tr·ª£ gi√∫p, tham gia nh√≥m Telegram c·ªßa ch√∫ng t√¥i.{" "}
            <a href="#" className="text-primary hover:underline">
              Telegram Group
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};
